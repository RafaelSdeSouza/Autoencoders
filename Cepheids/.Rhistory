d8 = sum(dunif(par[28:(N + 27)],obsy - 2*erry,obsy + 2*erry,log = TRUE))
d9 = sum(dunif(par[(N + 28):(2*N + 27)],obsx - errx,obsx + errx,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9)
}
sampler = function(){
c(runif(1, 0,  1),
exp(runif(1, log(0.001), log(0.3))),
exp(runif(2, log(1e-3), log(10))),
runif(2, 2, 10),
exp(runif(5,log(1e-4), log(1))), #xcat
rlnorm(5, log(1), log(1 + syst^2)), #ynorm
runif(5, 0, 5e-5),
rnorm(5, 0, systx),
rgamma(1, 1, 0.05),
runif(N, obsy - erry,obsy + erry),
runif(N,obsx - errx,obsx + errx))
}
out <- createPrior(density = density, sampler = sampler, lower = lower, upper = upper, best = best)
return(out)
}
#prior <- createPrior(density = density,
#                    lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood, lower = low, upper = up,
names = c("e0","er","gd2","gn2","ad","an",to("yscat", 5),to("ynorm", 5),to("xscat", 5),
to("xnorm", 5),"ue", to("y", N),to("x", N)))
settings <- list(iterations = 5000000,
burnin = 500000, message = T,nrChains = 1,adaptation = 0.3)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
setup <- createBayesianSetup(likelihood = likelihood, lower = low, upper = up,
names = c("e0","er","gd2","gn2","ad","an",to("yscat", 5),to("ynorm", 5),to("xscat", 5),
to("xnorm", 5),"ue", to("y", N),to("x", N)))
settings <- list(iterations = 5000000,
burnin = 500000, message = T,nrChains = 1,adaptation = 0.3)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
likelihood(up)
likelihood(low)
likelihood <- function(par){
e0 = par[1]
er = par[2]
gin = par[3]
gout = par[4]
ad   = par[5]
ap =  par[6]
yscat = par[7:11]
ynorm = par[12:16]
xscat = par[17:21]
xnorm = par[22:26]
ue = par[27]
y = par[28:(N + 27)]
xx = par[(N + 28):(2*N + 27)]
llxnorm = sum(dnorm(xnorm,mean=0,sd=systx,log = T))
llynorm = sum(dlnorm(ynorm,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
llxscat <- sum(dnorm(xscat,mean = 0,sd = 1e-3, log = T))
# +xscat[re]
# llxx    <- sum(dnorm(obsx,mean = xx,sd = (errx),log = T))
llxx  <- sum(dnorm(obsx,mean = xx + xnorm[re],sd = errx + xscat[re],log = T))
lly <- sum(dnorm(y,mean = ynorm[re]*SfacTdn(xx, e0 ,er,gin, gout,ad,ap,ue), sd = yscat[re],  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
#  + llxscat
return(llynorm + llobs + lly + llxx  + llxnorm + llxscat )
}
low <- c(rep(1e-3,2),1e-4,1e-4, 2,2,  rep(1e-4,5),    rep(0.5,5), rep(0,5), -5*systx, 1e-3, obsy - 2*abs(erry),obsx - errx)
up <- c(1,0.3, rep(10,2), 10,10,   rep(1,5),  rep(1.5,5),   rep(5e-2,5), 5*systx, 100, obsy + 2*abs(erry),obsx + errx)
createTdnPrior <- function(lower, upper, best = NULL){
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dtnorm(par[2], mean = 0, sd = 1,log = TRUE))
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 2, 10, log = TRUE))
d3 = sum(dunif(par[7:11], 0, 1,log = TRUE))
d4 = sum(dlnorm(par[12:16],log(1),log(1 + syst^2),log = TRUE))
d5 = sum(dtnorm(par[17:21],0, 1e-3,log = TRUE))
d6 = sum(dnorm(par[22:26],0,sd = systx,log = TRUE))
d7 = dgamma(par[27], 1, 0.05,log = TRUE)
d8 = sum(dunif(par[28:(N + 27)],obsy - 2*erry,obsy + 2*erry,log = TRUE))
d9 = sum(dunif(par[(N + 28):(2*N + 27)],obsx - errx,obsx + errx,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9)
}
sampler = function(){
c(runif(1, 0,  1),
exp(runif(1, log(0.001), log(0.3))),
exp(runif(2, log(1e-3), log(10))),
runif(2, 2, 10),
exp(runif(5,log(1e-4), log(1))), #xcat
rlnorm(5, log(1), log(1 + syst^2)), #ynorm
runif(5, 0, 5e-3),
rnorm(5, 0, systx),
rgamma(1, 1, 0.05),
runif(N, obsy - erry,obsy + erry),
runif(N,obsx - errx,obsx + errx))
}
out <- createPrior(density = density, sampler = sampler, lower = lower, upper = upper, best = best)
return(out)
}
#prior <- createPrior(density = density,
#                    lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood, lower = low, upper = up,
names = c("e0","er","gd2","gn2","ad","an",to("yscat", 5),to("ynorm", 5),to("xscat", 5),
to("xnorm", 5),"ue", to("y", N),to("x", N)))
settings <- list(iterations = 5000000,
burnin = 500000, message = T,nrChains = 1,adaptation = 0.3)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res,  start = 80000, whichParameters = c(1,2,3,4,5,6,27))
tracePlot(sampler = res,  start = 10000, whichParameters = c(1,2,3,4,5,6,27))
tdnd <- read.table("Tdn_DREAM.dat")
tdnd
tdnd[1,]
tdnd <- read.table("Tdn_DREAM.dat",header = T)
tdnd[1,]
Sptdn <- SfactTdn(tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)
source("SfacTdn.R")
Sptdn <- SfactTdn(tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)
Sptdn <- SfacTdn(tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);require(gsl)
library(dplyr);require(lessR);library(BayesianTools);
require(truncnorm);require(msm)
source("SfacTdn.R")
install.packages("msm")
install.packages("expm")
install.packages("expm")
install.packages("expm")
install.packages("expm",type="source")
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);require(gsl)
library(dplyr);require(lessR);library(BayesianTools);
require(truncnorm);require(msm)
source("SfacTdn.R")
install.packages("truncnorm")
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);require(gsl)
library(dplyr);require(lessR);library(BayesianTools);
require(truncnorm);require(msm)
source("SfacTdn.R")
install.packages("RcppGSL")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("gsl")
install.packages("rjags")
install.packages("magrittr")
install.packages("dplyr")
install.packages("lessR")
install.packages("BayesianTools")
install.packages("truncnorm")
install.packages("msm")
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Real_data")
# preparation: remove all variables from the work space
rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);require(gsl)
library(dplyr);require(lessR);library(BayesianTools);
require(truncnorm);require(msm)
source("SfacTdn.R")
tdnd <- read.table("Tdn_DREAM.dat",header = T)
Sptdn <- SfacTdn(tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)
xpred <- seq(min(xx),max(xx),length.out = 250)
df <- NULL
for(i in 1:250){
temp_df <- data.frame(x=xpred,y= (SfacTdn(xpred,tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)))
df <- rbind(df,temp_df)
}
ensamble <- read.csv("ensamble_Tdn_extra.csv",header = T)
#%>%  filter(E <= 0.5)
#filter(dat!= "Mag75")
#%>% filter(E <= 0.5) %>%   filter(dat!= "Arn53") %>%
# droplevels(ensamble$dat)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
errx <- ensamble$E_stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(unique(ensamble$Syst))
systx <- c(0.000075,0.000009,0.0002,0.000006,0.0032)
xpred <- seq(min(obsx),max(obsx ),length.out = 250)
df <- NULL
for(i in 1:250){
temp_df <- data.frame(x=xpred,y= (SfacTdn(xpred,tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)))
df <- rbind(df,temp_df)
}
ggplot(data=ensamble,aes(x=obsx,y=obsy)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
theme_pubr() +
scale_color_stata() +
scale_shape_stata()+
xlab("x") + ylab("y") +
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
ggplot(data=ensamble,aes(x=obsx,y=obsy)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_color_stata() +
scale_shape_stata()+
xlab("x") + ylab("y") +
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
df <- NULL
for(i in 1:250){
temp_df <- data.frame(x=xpred,y= (SfacTdn(xpred,tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)),col=rep(i:i, each=250))
df <- rbind(df,temp_df)
}
ggplot(data=ensamble,aes(x=obsx,y=obsy)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_color_stata() +
scale_shape_stata()+
xlab("x") + ylab("y") +
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
df$col
df$col[100000]
df$col <- as.factor(df$col)
ggplot(data=ensamble,aes(x=obsx,y=obsy)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_color_stata() +
scale_shape_stata()+
xlab("x") + ylab("y") +
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
ensamble
ggplot(data=ensamble,aes(x=E,y=S,group=dat)) +
geom_point()
ggplot(data=ensamble,aes(x=E,y=S,group=dat)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_color_stata() +
scale_shape_stata()
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_color_stata() +
scale_shape_stata()
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_color_stata() +
scale_shape_stata()
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,mapping=aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "green",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()
ggplot(data=ensamble,aes(x=E,y=S,group=dat,colour=dat,shape=dat)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S,group=dat)) +
geom_point(size=2,colour=dat,shape=dat) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S)) +
geom_point(size=2,group=dat,colour=dat,shape=dat) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
xpred
exp(seq(log(min(obsx)),log(max(obsx)),length.out = 250))
xpred <- exp(seq(log(min(obsx)),log(max(obsx)),length.out = 250))
df <- NULL
for(i in 1:250){
temp_df <- data.frame(x=xpred,y= (SfacTdn(xpred,tdnd[,1],tdnd[,2],tdnd[,3],tdnd[,4],tdnd[,5],tdnd[,6],0)),col=rep(i:i, each=250))
df <- rbind(df,temp_df)
}
df$col <- as.factor(df$col)
ggplot(data=ensamble,aes(x=E,y=S)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
df$col
ggplot(data=ensamble,aes(x=E,y=S)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y),group=col,
alpha = 0.1, color = "red",size=0.3)
ggplot(data=ensamble,aes(x=E,y=S)) +
geom_point(size=2) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
ggplot(data=df,aes(x = x, y = y,group=col)) +
geom_line()
tdnd[,1]
index <- sample(seq(1:nrow(tdnd)),250,replace=FALSE)
index[i]
df <- NULL
for(i in 1:250){
temp_df <- data.frame(x=xpred,y= (SfacTdn(xpred,tdnd[index[i],1],tdnd[index[i],2],tdnd[index[i],3],tdnd[index[i],4],
tdnd[index[i],5],tdnd[index[i],6],0)),col=rep(i:i, each=250))
df <- rbind(df,temp_df)
}
df$col <- as.factor(df$col)
ggplot(data=df,aes(x = x, y = y,group=col)) +
geom_line() +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_line(data=df,aes(x = x, y = y,group=col),
alpha = 0.1, color = "red",size=0.3)
ggplot(data=df,aes(x = x, y = y,group=col)) +
geom_line(alpha = 0.1, color = "red",size=0.3) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_point(data=ensamble,aes(x = E, y = S,group=col)
)
ggplot(data=df,aes(x = x, y = y,group=col)) +
geom_line(alpha = 0.1, color = "red",size=0.3) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_point(data=ensamble,aes(x = E, y = S,group=dat)
)
ggplot(data=df,aes(x = x, y = y,group=col)) +
geom_line(alpha = 1, color = "red",size=0.3) +
#  geom_segment(data = filter(censdat,y==L_limit),
#               mapping=aes(x=x1, y=y, xend=x1, yend = y-5),size=0.1,
#               colour=cens,arrow = arrow()) +
scale_x_log10()+
scale_shape_stata()+
geom_point(data=ensamble,aes(x = E, y = S,group=dat)
)
install.packages("h2o")
library(h2o)
h2o.init()
install.packages("rJava")
h2o.init()
h2o.init()
h2o.init()
Lyrae <- read.table("blg_met_rrl.dat",header=T) %>% mutate(.,Period = log10(Period)) %>%
filter(X.Fe.H. > -1.647874 && X.Fe.H. < -0.279256)
test_index <- sample(seq_len(nrow(Lyrae)),replace=F, size = 5000)
Lyrae_short <- Lyrae[test_index,c("Period","X.Fe.H.","R21")]
LyraeH20  <- as.h2o(Lyrae)
parts <- h2o.splitFrame(LyraeH20,0.8)
train <- parts[[1]]
test <- parts[[2]]
setwd("~/Documents/GitHub/Autoencoders/Cepheids")
Lyrae <- read.table("blg_met_rrl.dat",header=T) %>% mutate(.,Period = log10(Period)) %>%
filter(X.Fe.H. > -1.647874 && X.Fe.H. < -0.279256)
test_index <- sample(seq_len(nrow(Lyrae)),replace=F, size = 5000)
Lyrae_short <- Lyrae[test_index,c("Period","X.Fe.H.","R21")]
LyraeH20  <- as.h2o(Lyrae)
parts <- h2o.splitFrame(LyraeH20,0.8)
train <- parts[[1]]
test <- parts[[2]]
train
m_AE_4 = h2o.deeplearning(x = c("Period", "R21","X.Fe.H."),
training_frame=train,
autoencoder=TRUE,
epochs = 100,
model_id = "m_AE_4",
train_samples_per_iteration=nrow(train),
hidden = c(4,2,4),
activation="Tanh"
)
sh = h2o.scoreHistory(m_AE_4)
plot(as.data.frame(h2o.scoreHistory(m_AE_4))$training_mse,type="l")
train_1 <- h2o.deepfeatures(m_AE_4,train,3)
plot(as.data.frame(train_1))
m_AE_4 = h2o.deeplearning(x = c("Period", "R21","X.Fe.H."),
training_frame=train,
autoencoder=TRUE,
epochs = 100,
model_id = "m_AE_4",
train_samples_per_iteration=nrow(train),
hidden = c(4,1,4),
activation="Tanh"
)
sh = h2o.scoreHistory(m_AE_4)
plot(as.data.frame(h2o.scoreHistory(m_AE_4))$training_mse,type="l")
train_1 <- h2o.deepfeatures(m_AE_4,train,1)
plot(as.data.frame(train_1))
train_1
train_1 <- h2o.deepfeatures(m_AE_4,train,2)
hist(as.data.frame(train_1))
train_1
d1 <- as.data.frame(train_1)$DF.L2.C1
hist(d1)
dens  <- densityMclust(d1)
summary(dens)
plot(dens, what = "density", data = d1)
install.packages("mclust")
require(mclust)
dens  <- densityMclust(d1)
summary(dens)
plot(dens, what = "density", data = d1)
dens
plot(as.data.frame(Lyrae_short),col=dens$classification)
m_AE_4 = h2o.deeplearning(x = c("Period", "R21","X.Fe.H."),
training_frame=train,
autoencoder=TRUE,
epochs = 100,
model_id = "m_AE_4",
train_samples_per_iteration=nrow(train),
hidden = c(3,2,1,2,3),
activation="Tanh"
)
sh = h2o.scoreHistory(m_AE_4)
plot(as.data.frame(h2o.scoreHistory(m_AE_4))$training_mse,type="l")
rain_1 <- h2o.deepfeatures(m_AE_4,train,3)
hist(as.data.frame(train_1))
d1 <- as.data.frame(train_1)$DF.L2.C1
dens  <- densityMclust(d1)
summary(dens)
plot(dens, what = "density", data = d1)
plot(as.data.frame(Lyrae_short),col=dens$classification)
predictions <- h2o.predict(m_AE_4,iris)
plot(dens, what = "density", data = d1)
